name: Deploy app
run-name: Deploy app to ${{ inputs.target }} env with ${{ inputs.docker_port }} port

on:
  workflow_dispatch:
    inputs:
      target:
        description: "Environment for deployment"
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - prod
      docker_port:
        description: "Port for running docker"
        default: '8811'

env:
  DOCKER_REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build and push docker
    permissions:
      contents: read
      packages: write
    outputs:
      full_image_name: ${{ steps.define_image_names.outputs.FULL_IMAGE_NAME }}
      image_name: ${{ steps.define_image_names.outputs.IMAGE_NAME }}
    steps:
      - name: Lower case image name
        id: define_image_names
        env:
          FULL_REPO: ${{ github.repository }}
          REPO: ${{ github.event.repository.name }}
          TARGET: ${{ inputs.target }}
        run: |
          echo "FULL_IMAGE_NAME=${FULL_REPO,,}/${TARGET}" >>${GITHUB_OUTPUT}
          echo "IMAGE_NAME=${REPO,,}/${TARGET}" >>${GITHUB_OUTPUT}
      - name: Check out branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_GH }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ steps.define_image_names.outputs.FULL_IMAGE_NAME }}:latest

  alembic:
    runs-on: ubuntu-latest
    name: Alembic
    steps:
      - name: Check out branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name }}
      - name: TAR code
        env:
          B_ENV: ${{ inputs.target }}
        run: tar -cvf wftb-${{ env.B_ENV }}.tar .
      - name: Copy code to host
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: ${{ secrets.SSH_PORT }}
          source: "wftb-${{ inputs.target }}.tar"
          target: "~/builds"
      - name: Apply alembic
        uses: appleboy/ssh-action@v1.0.0
        env:
          B_ENV: ${{ inputs.target }}
          WFTB__DB_DSN: ${{ inputs.target == 'prod' && secrets.DB_DSN_WFTB_PROD || secrets.DB_DSN_WFTB_TEST }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: ${{ secrets.SSH_PORT }}
          script_stop: true
          script: |
            mkdir ~/builds/wftb-${{ env.B_ENV }}
            tar -xf ~/builds/wftb-${{ env.B_ENV }}.tar -C ~/builds/wftb-${{ env.B_ENV }}/
            cd ~/builds/wftb-${{ env.B_ENV }}/
            export WFTB_DB_DSN=${{ env.WFTB__DB_DSN }}
            python3 -m alembic upgrade head
            cd ~
            rm ~/builds/wftb-${{ env.B_ENV }}.tar
            sudo rm -rf ~/builds/wftb-${{ env.B_ENV }}

  deploy:
    runs-on: ubuntu-latest
    name: Deploy docker
    needs: [build, alembic]
    steps:
      - name: Deploy
        uses: appleboy/ssh-action@v1.0.0
        env:
          B_ENV: ${{ inputs.target }}
          WFTB_DEPLOY_FULL_IMAGE_NAME: ${{ needs.build.outputs.full_image_name }}
          WFTB_DEPLOY_PAT_GH: ${{ secrets.PAT_GH }}
          WFTB_DEPLOY_GH_LOGIN: ${{ github.actor }}
          WFTB_DEPLOY_DOCKER_PORT: ${{ inputs.docker_port }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: ${{ secrets.SSH_PORT }}
          script_stop: true
          script: |
            docker login ${{ env.DOCKER_REGISTRY }} -u ${{ env.WFTB_DEPLOY_GH_LOGIN }} -p ${{ env.WFTB_DEPLOY_PAT_GH }}
            echo "-------- Try to stop wftb-${{ env.B_ENV }} container"
            docker stop wftb-${{ env.B_ENV }} || true
            echo "-------- Try to delete wftb-${{ env.B_ENV }} container"
            docker container rm wftb-${{ env.B_ENV }} || true
            echo "-------- Try to delete ${{ env.WFTB_DEPLOY_FULL_IMAGE_NAME }} image"
            docker rmi ${{ env.DOCKER_REGISTRY }}/${{ env.WFTB_DEPLOY_FULL_IMAGE_NAME }} || true
            echo "-------- Try to pull and run ${{ env.WFTB_DEPLOY_FULL_IMAGE_NAME }} image"
            docker run -d \
              -it \
              --name wftb-${{ env.B_ENV }} \
              --network=host \
              -e APP_HOST=127.0.0.1 \
              -e APP_PORT=${{ env.WFTB_DEPLOY_DOCKER_PORT }} \
              -e APP_ENV=${{ env.B_ENV }} \
              --mount type=bind,source=/home/${{ env.WFTB_DEPLOY_GH_LOGIN }}/deploy_configs/wftb-${{ env.B_ENV }}/config.yaml,target=/application/config/config.yaml \
              ${{ env.DOCKER_REGISTRY }}/${{ env.WFTB_DEPLOY_FULL_IMAGE_NAME }}:latest
            docker logout "${{ env.DOCKER_REGISTRY }}"

      - name: Delete old images
        uses: actions/delete-package-versions@v4
        if: ${{ always() }}
        with:
          package-name: ${{ needs.build.outputs.image_name }}
          package-type: 'container'
          min-versions-to-keep: 1
          token: ${{ secrets.PAT_GH }}
